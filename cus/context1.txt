Below is the **updated context** for the **Django Customer Management App**, now incorporating the change where **customer names** are clickable instead of using a separate “View Details” button and maintaining the focus on streamlining the handling of customer management, message scheduling, file uploads, and UI interactions.

---

## **1. Project Overview**

This **Customer Management Django App** lets users:

1. **Add customers** (with fields like name, email, phone, etc.).  
2. **Upload invoices/receipts** (PDF or images automatically converted to PDF).  
3. **Schedule WhatsApp or SMS messages** to customers at future dates.  
4. **View, edit, or delete** existing customers.  
5. **Search** for customers by name or phone number.  
6. **Sort** customers by **earliest upcoming scheduled date** (so the most urgent appear first).  
7. **Mark scheduled messages** as done (via a “Mark as Done” button).  
8. See a **confirmation page** before permanently deleting a customer.

The app integrates **Bootstrap 4** for the user interface and leverages **Tempus Dominus** (partially replaced) for date/time picking, although some scheduling is done purely on the backend.

---

## **2. Key Libraries and Tools**

- **Django Bootstrap Datepicker Plus**: Provides a date/time picker for scheduling.  
- **jQuery (3.5.1+) & Moment.js (2.29.4+)**: Helps with client-side form/AJAX operations and date handling.  
- **Pillow (PIL)**: Converts uploaded images (JPEG, PNG) into PDFs.  
- **AJAX + FormData**: Handles asynchronous form submissions, especially for file uploads.

---

## **3. Directory Structure**

```
customer_manager/
├── crm/
│   ├── migrations/
│   ├── templates/
│   │   └── crm/
│   │       ├── base.html
│   │       ├── customer_list.html
│   │       ├── customer_detail.html
│   │       ├── form.html
│   │       ├── customer_confirm_delete.html
│   │       └── ...
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── forms.py
│   ├── models.py
│   ├── views.py
│   ├── urls.py
│   └── tests.py
├── customer_manager/
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
└── manage.py
```

---

## **4. Handling Invoices**

1. **Allowed File Types**: PDF, JPEG, PNG.  
2. **Image to PDF Conversion**: If an image file is uploaded, **Pillow** is used to convert it to PDF automatically.  
3. **InvoiceForm** (`forms.py`) enforces this with a custom validator and saves to the `Invoice` model.  
4. **invoice_create** (`views.py`):  
   - Uses `request.FILES` to capture and process the file.  
   - Converts images to PDF or saves a PDF as-is.  
   - Handles both **AJAX** and **non-AJAX** submissions.

---

## **5. Message Scheduling**

1. **Scheduling** (WhatsApp or SMS) allows specifying a number of days from now for sending.  
2. **message_schedule** (`views.py`):  
   - Creates a `MessageSchedule` object with `is_sent = False` and `is_reminder_sent = False`.  
   - Uses a **Python `Timer`** to eventually call `send_message`.  
3. **send_message**: Prints/logs the message content and marks `is_sent = True`.  
4. **Due Reminders**: If `schedule_date` is in the past/now and `is_sent = False`/`is_reminder_sent = False`, they appear in the “Due Reminders” section.  
5. **Mark as Done**: A button triggers an AJAX POST to set `is_reminder_sent=True` (or handle any other logic).

---

## **6. Sorting, Search, and CRUD**

### **Sorting by Upcoming Date**
- **customer_list** (`views.py`) uses `django.db.models.Min` to annotate each `Customer` with the earliest `MessageSchedule.schedule_date`.  
- Orders by that earliest date so the most urgent customers appear first.

### **Search**
- If a user enters a search term in the **search bar**, the view filters `Customer` objects by name or phone number (`icontains`).

### **Edit/Update**
- **customer_update** (`views.py`) loads an existing `Customer` in a form; on POST, updates the data.

### **Delete + Confirm Page**
- **customer_delete** (`views.py`) shows a confirm-delete template (`customer_confirm_delete.html`) on GET, and permanently deletes on POST.  
- This ensures the user sees a confirmation before removing data.

### **Clickable Customer Name**
- Instead of a separate **“View Details”** button, the **customer’s name** is clickable and links to their **detail page**.  
- This streamlines the UI while retaining full detail-view functionality.

---

## **7. JavaScript & AJAX Form Submissions**

In **`customer_list.html`** (and other templates where relevant):

1. **AJAX forms** for adding a customer, scheduling a message, or uploading an invoice.  
2. **Use `FormData`** to include file fields in the submission.  
3. **`processData=false` & `contentType=false`** are crucial for proper file upload handling.  
4. **CSRF token** is included automatically if it’s in the template or can be appended to the form data if needed.

---

## **8. Template Changes & Feedback Messages**

- **Django Messages** (`messages.success`, etc.) provide success/failure user feedback.  
- **Modals**: `Add Customer`, `Schedule Message` forms load dynamically over AJAX.  
- **customer_confirm_delete.html**: A simple page prompting the user to confirm or cancel the deletion of a customer.
- **customer_list.html**:  
  - Replaced the “View Details” button with a clickable name/phone that links to the detail view.  
  - Other actions (Schedule Message, Mark as Done, Edit, Delete) remain unchanged.

---

## **9. Testing Checklist**

1. **Add/Edit/Delete Customers**:
   - Confirm the confirm-delete page appears on GET, and deletion is permanent on POST.
2. **Invoice Creation** (PDF and images):
   - Ensure images are converted to PDF.  
   - Validate that incorrect file types are rejected.
3. **Message Scheduling**:
   - Check if scheduled messages appear under “Due Reminders” when the time is reached.  
   - Mark them as done to remove them from the list.
4. **Sorting & Search**:
   - Verify that searching by partial name or phone number narrows the list.  
   - Confirm that customers with earlier schedules appear higher.
5. **AJAX Submissions**:
   - Look in the browser’s DevTools → Network tab to ensure file data is included.  
   - Make sure any validation errors (e.g., missing fields) appear inline.

---

### **Summary of Recent Changes**

- **Sorting by earliest schedule date** (via annotation and custom ordering).  
- **Search functionality** for name or phone in `customer_list`.  
- **Edit/Update** and **Delete** features for `Customer`, with a new **confirmation page** on `GET` requests to `customer_delete`.  
- **“Mark as Done”** buttons for due reminders or directly in the customer list if an unsent message is scheduled.  
- **AJAX** improvements for forms, particularly with file upload (`FormData`) and CSRF integration.  
- **Replaced “View Details” button with a clickable customer name** to access detail pages more directly.

With these updates, the app now provides a **robust** end-to-end customer management experience, from invoice uploads to schedule-based notifications and a more refined user interface.